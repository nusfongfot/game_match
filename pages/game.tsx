import { useEffect, useState } from "react";
import { Button, Container, Stack, Typography } from "@mui/material";
import Head from "next/head";
import Swal from "sweetalert2";
import { useUserAuth } from "@/context/userAuthContext";

interface SelectCard {
  src: string;
  id: number;
  match: boolean;
}

const cardImages = [
  { src: "/assets/images/1.jpg", match: false },
  { src: "/assets/images/2.jpg", match: false },
  { src: "/assets/images/3.png", match: false },
];

export default function Home() {
  const { user, logOut } = useUserAuth();

  const [cards, setCards] = useState<SelectCard[]>([]);
  const [turns, setTurns] = useState<number>(0);
  const [matches, setMatches] = useState<number>(0);
  const [selectedOne, setSelectedOne] = useState<null | SelectCard>(null);
  const [selectedTwo, setSelectedTwo] = useState<null | SelectCard>(null);

  const shuffleCard = () => {
    const shuffledCards = [...cardImages, ...cardImages]
      .sort(() => Math.random() - 0.5)
      .map((card) => ({ ...card, id: Math.random() }));

    setCards(shuffledCards);
    setTurns(0);
    setMatches(0);
  };

  const shuffleCardNextLevel = () => {
    cardImages.push(
      { src: "/assets/images/4.jpg", match: false },
      { src: "/assets/images/5.jpg", match: false },
      { src: "/assets/images/6.jpg", match: false }
    );
    const shuffledCards = [...cardImages, ...cardImages]
      .sort(() => Math.random() - 0.5)
      .map((card) => ({ ...card, id: Math.random() }));
    setCards(shuffledCards);
    setTurns(0);
    setMatches(0);
  };

  const handleClickCard = (item: SelectCard) => {
    if (selectedOne !== item) {
      if (selectedOne) {
        setSelectedTwo(item);
      } else {
        setSelectedOne(item);
      }
    }
  };

  const resetTurn = () => {
    setSelectedTwo(null);
    setSelectedOne(null);
    setTurns((prev) => prev + 1);
  };

  const handleGameDone = () => {
    Swal.fire({
      title: "Good Job Game Done!",
      icon: "warning",
      confirmButtonColor: "#3085d6",
      confirmButtonText: "Play again",
    }).then((result) => {
      if (result.isConfirmed) {
        shuffleCard();
      }
    });
  };

  const handleGameNextLevel = () => {
    Swal.fire({
      title: "Goog Job Next Level",
      icon: "warning",
      confirmButtonColor: "#3085d6",
      confirmButtonText: "Next Level",
    }).then((result) => {
      if (result.isConfirmed) {
        shuffleCardNextLevel();
      }
    });
  };

  useEffect(() => {
    shuffleCard();
  }, []);

  useEffect(() => {
    if (matches == 3 && cards.length == 6) {
      handleGameNextLevel();
    }
    if (matches == 6) {
      handleGameDone();
    }
  }, [matches]);

  useEffect(() => {
    if (selectedOne && selectedTwo) {
      if (selectedOne.src == selectedTwo.src) {
        setMatches((prev) => prev + 1);
        setCards((prevCard) => {
          return prevCard.map((card: SelectCard) => {
            if (card.src == selectedOne.src) {
              return { ...card, match: true };
            }
            return card;
          });
        });
        resetTurn();
      } else {
        setTimeout(() => {
          resetTurn();
        }, 500);
      }
    }
  }, [selectedOne, selectedTwo]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Container maxWidth='xl'>
        <Stack
          flexDirection={"column"}
          justifyContent={"center"}
          alignItems={"center"}
        >
          <Stack
            flexDirection={"row"}
            width={"100%"}
            justifyContent={"space-between"}
            mt={2}
          >
            <Typography align='center' variant='h4'>
              {user.email ? `Welcome ${user.email}` : "Welcome"}
            </Typography>
            <Button
              variant='contained'
              color='error'
              size='small'
              onClick={logOut}
            >
              Logout
            </Button>
          </Stack>
          <Typography align='center' variant='h4' mt={2}>
            Magic Match Card By Nus
          </Typography>

          <Button variant='contained' size='small' onClick={shuffleCard}>
            New Game
          </Button>

          <Stack flexDirection={"row"} gap={4} mt={2}>
            <Typography variant='h5'>{`Matches: ${matches}`}</Typography>
            <Typography variant='h5'>{`Turns: ${turns}`}</Typography>
          </Stack>

          <div className='card-container'>
            {cards.map((item) => (
              <div
                className='flip-card'
                key={item.id}
                onClick={() => (item.match ? {} : handleClickCard(item))}
              >
                <div
                  className={
                    selectedOne == item || selectedTwo == item || item.match
                      ? "flip-card-inner"
                      : ""
                  }
                >
                  <div className='flip-card-front'>
                    <img
                      src='/assets/images/cover.png'
                      alt='Avatar'
                      className='flip-card'
                    />
                  </div>

                  <div className={"flip-card-back"}>
                    <img src={item.src} alt='Avatar' className='flip-card' />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </Stack>
      </Container>
    </>
  );
}
